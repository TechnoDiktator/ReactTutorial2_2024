{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n//EVERY REDUX TOOLKIT SLICE NEEDS A NAME\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  //our ostate object\n  reducers: {\n    //creating the reducer object\n    increment(state) {\n      //it may look like \n      //that we are editing the existing \n      //state \n      //but redux \n      //toolkit actualy is cloning \n      //the state object (deep copy)\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    /*\n    it might look lie tha we have not passed an\n    action object in the abocve reducer functions \n    but the redux toolit is implicitely doing that \n    */\n    increase(state, action) {\n      //the redux toolkit implicit action \n      //object contains a predefined key \n      // that is the payload key where we can provide the action payload\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nexport default counterSlice;","map":{"version":3,"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/14-reduxtry/01-starting-project/src/store/counter.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\n\n\nconst initialCounterState = {counter:0 , showCounter : true}\n\n\n//EVERY REDUX TOOLKIT SLICE NEEDS A NAME\nconst counterSlice = createSlice({\n    name:'counter',\n    initialState: initialCounterState , //our ostate object\n    reducers:{ //creating the reducer object\n        increment(state){\n            //it may look like \n            //that we are editing the existing \n            //state \n            //but redux \n            //toolkit actualy is cloning \n            //the state object (deep copy)\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        /*\n        it might look lie tha we have not passed an\n        action object in the abocve reducer functions \n        but the redux toolit is implicitely doing that \n        */\n        increase(state , action){        //the redux toolkit implicit action \n                                        //object contains a predefined key \n                                         // that is the payload key where we can provide the action payload\n            state.counter = state.counter + action.payload\n        },\n        toggleCounter(state){\n            state.showCounter = !state.showCounter\n        }\n    },\n})\n\n\nexport default counterSlice\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,mBAAmB,GAAG;EAACC,OAAO,EAAC,CAAC;EAAGC,WAAW,EAAG;AAAI,CAAC;;AAG5D;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAC,SAAS;EACdC,YAAY,EAAEL,mBAAmB;EAAG;EACpCM,QAAQ,EAAC;IAAE;IACPC,SAASA,CAACC,KAAK,EAAC;MACZ;MACA;MACA;MACA;MACA;MACA;MACAA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQS,QAAQA,CAACF,KAAK,EAAGG,MAAM,EAAC;MAAS;MACD;MACC;MAC7BH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAGF,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}