{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\n\n//REDUX TOOLTIK\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n//EVERY REDUX TOOLKIT SLICE NEEDS A NAME\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  //our ostate object\n  reducers: {\n    //creating the reducer object\n    increment(state) {\n      //it may look like \n      //that we are editing the existing \n      //state \n      //but redux \n      //toolkit actualy is cloning \n      //the state object (deep copy)\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    /*\n    it might look lie tha we have not passed an\n    action object in the abocve reducer functions \n    but the redux toolit is implicitely doing that \n    */\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n//==================================================\n//HOW TO DEFINE THE ACTION VALUES LKE WE DID IN THE CONVENTIONAL REDUX STORE\n//the action key present in the slice \n//automatically creates methods that spawn  actions for the registered reducer functions\n//it even contains an implicitely created action name (that is type)\n//and also key where you can define the payloaad too\n\n//counterSlice.actions.toggleCounter\n//========================================================\n\n//FOR CREATINg SINGLE REDUCER\n//const store = createStore(counterSlice.reducer)\n\n//MULTIPLE REDUCERS\n//IF you want to pass mutiple reducers we use configurestore\nconst store = configureStore({\n  //so you can pass multiple reducer\n  // reducer : {\n  //     counter : counterSlice.reducer,\n\n  // }\n\n  reducer: counterSlice.reducer\n});\n\n//===================================== OLDER WAY without toolkit =========================================\n\n//WITHOUT REDUX TOOLIT THIS IS OLDER \n//METHOD TO REGISTER REDUCERS WITH REDUX\n\n//export const INCREMENT  = 'increment'\n\n//MODIFYING EXISTING STATE CAUSES THE SYSTEM TO HAVE \n//UNEXPECTED BEHAVIOUR\n\n//SO ALWAYS CREATE  BRAND NEW STATE OBJECT\n\n//NEVER MUTATE THE EXISTING STATE \n//ALWAYS CREATE A NEW STATE OBJECT WITH ALL THE PROPERTIES\n//EDIt THE PART OF THE OBJECT YOU WNTR TO CHANGE\n// const counteReducer = (state = initialState , action) => {\n\n//     //avoid typos in action types\n//     if(action.type === INCREMENT){\n//         return {\n//             counter:state.counter + 1 ,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'decrement'){\n//         return {\n//             counter:state.counter - 1,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === \"increase\"){\n\n//         return {\n//             counter : state.counter + action.amount,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'toggle'){\n//         return {\n//             showCounter : !state.showCounter,\n//             counter : state.counter\n//         }\n//     }\n//     return state;\n// }\n\n//this cinitializes the store\n//const store = createStore(counteReducer)\n\n//we willprovie this store\n//WHAT DOES PROVIDE MEAN\nexport default store;","map":{"version":3,"names":["createStore","configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","store","reducer"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/14-reduxtry/01-starting-project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux'\n\nimport { configureStore } from '@reduxjs/toolkit'\n\n\n\n//REDUX TOOLTIK\nimport {createSlice} from '@reduxjs/toolkit'\n\n\n\nconst initialState = {counter:0 , showCounter : true}\n\n\n//EVERY REDUX TOOLKIT SLICE NEEDS A NAME\nconst counterSlice = createSlice({\n    name:'counter',\n    initialState , //our ostate object\n    reducers:{ //creating the reducer object\n        increment(state){\n            //it may look like \n            //that we are editing the existing \n            //state \n            //but redux \n            //toolkit actualy is cloning \n            //the state object (deep copy)\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        /*\n        it might look lie tha we have not passed an\n        action object in the abocve reducer functions \n        but the redux toolit is implicitely doing that \n        */\n        increase(state , action){\n            state.counter = state.counter + action.amount\n        },\n        toggleCounter(state){\n            state.showCounter = !state.showCounter\n        }\n    },\n})\n\n\n//==================================================\n//HOW TO DEFINE THE ACTION VALUES LKE WE DID IN THE CONVENTIONAL REDUX STORE\n//the action key present in the slice \n//automatically creates methods that spawn  actions for the registered reducer functions\n//it even contains an implicitely created action name (that is type)\n//and also key where you can define the payloaad too\n\n//counterSlice.actions.toggleCounter\n//========================================================\n\n\n\n\n\n//FOR CREATINg SINGLE REDUCER\n//const store = createStore(counterSlice.reducer)\n\n\n\n\n\n//MULTIPLE REDUCERS\n//IF you want to pass mutiple reducers we use configurestore\nconst store = configureStore({\n    //so you can pass multiple reducer\n    // reducer : {\n    //     counter : counterSlice.reducer,\n\n    // }\n\n    reducer: counterSlice.reducer\n})\n\n\n\n\n\n\n\n\n//===================================== OLDER WAY without toolkit =========================================\n\n//WITHOUT REDUX TOOLIT THIS IS OLDER \n//METHOD TO REGISTER REDUCERS WITH REDUX\n\n//export const INCREMENT  = 'increment'\n\n\n//MODIFYING EXISTING STATE CAUSES THE SYSTEM TO HAVE \n//UNEXPECTED BEHAVIOUR\n\n//SO ALWAYS CREATE  BRAND NEW STATE OBJECT\n\n//NEVER MUTATE THE EXISTING STATE \n//ALWAYS CREATE A NEW STATE OBJECT WITH ALL THE PROPERTIES\n//EDIt THE PART OF THE OBJECT YOU WNTR TO CHANGE\n// const counteReducer = (state = initialState , action) => {\n\n//     //avoid typos in action types\n//     if(action.type === INCREMENT){\n//         return {\n//             counter:state.counter + 1 ,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'decrement'){\n//         return {\n//             counter:state.counter - 1,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === \"increase\"){\n         \n//         return {\n//             counter : state.counter + action.amount,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'toggle'){\n//         return {\n//             showCounter : !state.showCounter,\n//             counter : state.counter\n//         }\n//     }\n//     return state;\n// }\n\n//this cinitializes the store\n//const store = createStore(counteReducer)\n\n\n\n\n//we willprovie this store\n//WHAT DOES PROVIDE MEAN\nexport default store\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AAEjC,SAASC,cAAc,QAAQ,kBAAkB;;AAIjD;AACA,SAAQC,WAAW,QAAO,kBAAkB;AAI5C,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAC,CAAC;EAAGC,WAAW,EAAG;AAAI,CAAC;;AAGrD;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAC,SAAS;EACdJ,YAAY;EAAG;EACfK,QAAQ,EAAC;IAAE;IACPC,SAASA,CAACC,KAAK,EAAC;MACZ;MACA;MACA;MACA;MACA;MACA;MACAA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQQ,QAAQA,CAACF,KAAK,EAAGG,MAAM,EAAC;MACpBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IACjD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;;AAMA;AACA;AACA,MAAMW,KAAK,GAAGf,cAAc,CAAC;EACzB;EACA;EACA;;EAEA;;EAEAgB,OAAO,EAAEX,YAAY,CAACW;AAC1B,CAAC,CAAC;;AASF;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA,eAAeD,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}