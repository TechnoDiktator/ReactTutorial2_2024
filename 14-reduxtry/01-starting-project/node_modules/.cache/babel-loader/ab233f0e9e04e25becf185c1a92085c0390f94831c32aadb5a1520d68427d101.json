{"ast":null,"code":"import { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\n\n//REDUX TOOLTIK\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialAuthState = {\n  isAuthenticated: false\n};\n\n//ANOTHER SLICE\nconst authSlice = createSlice({\n  name: \"authentiacation\",\n  initialState: initialAuthState,\n  reducers: {\n    //WE ARE NOT MUTATINg THE CURRENT STATE\n    //TOOLKIT TAKES CARE OF CLONING THE STATE \n    //AND THEN MODIFYING IT\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n//==================================================\n//HOW TO DEFINE THE ACTION VALUES LKE WE DID IN THE CONVENTIONAL REDUX STORE\n//the action key present in the slice \n//automatically creates methods that spawn  actions for the registered reducer functions\n//it even contains an implicitely created action name (that is type)\n//and also key where you can define the payloaad too\n\n//counterSlice.actions.toggleCounter\n//========================================================\n\n//FOR CREATINg SINGLE REDUCER\n//const store = createStore(counterSlice.reducer)\n\n//MULTIPLE REDUCERS======================================\n//IF you want to pass mutiple reducers we use configurestore\nconst store = configureStore({\n  //so you can pass multiple reducer\n  //all individual reducers are merged into one\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n\n  //single reducer\n  //reducer: counterSlice.reducer\n});\n//=========================================================\n\n//IN THE END WE EXPORT THE STORE AND THE INTERNAL ACTIONS OBjECT OF EACH STATE SLICE\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;\n\n//===================================== OLDER WAY without toolkit =========================================\n\n//WITHOUT REDUX TOOLIT THIS IS OLDER \n//METHOD TO REGISTER REDUCERS WITH REDUX\n\n//export const INCREMENT  = 'increment'\n\n//MODIFYING EXISTING STATE CAUSES THE SYSTEM TO HAVE \n//UNEXPECTED BEHAVIOUR\n\n//SO ALWAYS CREATE  BRAND NEW STATE OBJECT\n\n//NEVER MUTATE THE EXISTING STATE \n//ALWAYS CREATE A NEW STATE OBJECT WITH ALL THE PROPERTIES\n//EDIt THE PART OF THE OBJECT YOU WNTR TO CHANGE\n// const counteReducer = (state = initialState , action) => {\n\n//     //avoid typos in action types\n//     if(action.type === INCREMENT){\n//         return {\n//             counter:state.counter + 1 ,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'decrement'){\n//         return {\n//             counter:state.counter - 1,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === \"increase\"){\n\n//         return {\n//             counter : state.counter + action.amount,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'toggle'){\n//         return {\n//             showCounter : !state.showCounter,\n//             counter : state.counter\n//         }\n//     }\n//     return state;\n// }\n\n//this cinitializes the store\n//const store = createStore(counteReducer)\n\n//we willprovie this store\n//WHAT DOES PROVIDE MEAN\n//export default store","map":{"version":3,"names":["createStore","configureStore","createSlice","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","store","reducer","counter","counterSlice","auth","counterActions","actions","authActions"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/14-reduxtry/01-starting-project/src/store/index.js"],"sourcesContent":["import {createStore} from 'redux'\n\nimport { configureStore } from '@reduxjs/toolkit'\n\n\n\n//REDUX TOOLTIK\nimport {createSlice} from '@reduxjs/toolkit'\n\n\n\n\nconst initialAuthState = {\n    isAuthenticated:false\n}\n\n//ANOTHER SLICE\nconst authSlice = createSlice({\n    name:\"authentiacation\",\n    initialState:initialAuthState,\n    reducers:{\n        //WE ARE NOT MUTATINg THE CURRENT STATE\n        //TOOLKIT TAKES CARE OF CLONING THE STATE \n        //AND THEN MODIFYING IT\n        login(state){\n            state.isAuthenticated = true\n        },\n        logout(state){\n            state.isAuthenticated = false\n        }\n    }\n})\n\n\n//==================================================\n//HOW TO DEFINE THE ACTION VALUES LKE WE DID IN THE CONVENTIONAL REDUX STORE\n//the action key present in the slice \n//automatically creates methods that spawn  actions for the registered reducer functions\n//it even contains an implicitely created action name (that is type)\n//and also key where you can define the payloaad too\n\n//counterSlice.actions.toggleCounter\n//========================================================\n\n\n\n\n\n//FOR CREATINg SINGLE REDUCER\n//const store = createStore(counterSlice.reducer)\n\n\n\n\n\n//MULTIPLE REDUCERS======================================\n//IF you want to pass mutiple reducers we use configurestore\nconst store = configureStore({\n    //so you can pass multiple reducer\n    //all individual reducers are merged into one\n    reducer : {\n        counter : counterSlice.reducer,\n        auth : authSlice.reducer\n    }\n\n    //single reducer\n    //reducer: counterSlice.reducer\n})\n//=========================================================\n\n//IN THE END WE EXPORT THE STORE AND THE INTERNAL ACTIONS OBjECT OF EACH STATE SLICE\nexport const counterActions = counterSlice.actions\nexport const authActions = authSlice.actions\nexport default store\n\n\n\n\n\n//===================================== OLDER WAY without toolkit =========================================\n\n//WITHOUT REDUX TOOLIT THIS IS OLDER \n//METHOD TO REGISTER REDUCERS WITH REDUX\n\n//export const INCREMENT  = 'increment'\n\n\n//MODIFYING EXISTING STATE CAUSES THE SYSTEM TO HAVE \n//UNEXPECTED BEHAVIOUR\n\n//SO ALWAYS CREATE  BRAND NEW STATE OBJECT\n\n//NEVER MUTATE THE EXISTING STATE \n//ALWAYS CREATE A NEW STATE OBJECT WITH ALL THE PROPERTIES\n//EDIt THE PART OF THE OBJECT YOU WNTR TO CHANGE\n// const counteReducer = (state = initialState , action) => {\n\n//     //avoid typos in action types\n//     if(action.type === INCREMENT){\n//         return {\n//             counter:state.counter + 1 ,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'decrement'){\n//         return {\n//             counter:state.counter - 1,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === \"increase\"){\n         \n//         return {\n//             counter : state.counter + action.amount,\n//             showCounter : state.showCounter\n//         }\n//     }else if(action.type === 'toggle'){\n//         return {\n//             showCounter : !state.showCounter,\n//             counter : state.counter\n//         }\n//     }\n//     return state;\n// }\n\n//this cinitializes the store\n//const store = createStore(counteReducer)\n\n\n\n\n//we willprovie this store\n//WHAT DOES PROVIDE MEAN\n//export default store\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,OAAO;AAEjC,SAASC,cAAc,QAAQ,kBAAkB;;AAIjD;AACA,SAAQC,WAAW,QAAO,kBAAkB;AAK5C,MAAMC,gBAAgB,GAAG;EACrBC,eAAe,EAAC;AACpB,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC1BI,IAAI,EAAC,iBAAiB;EACtBC,YAAY,EAACJ,gBAAgB;EAC7BK,QAAQ,EAAC;IACL;IACA;IACA;IACAC,KAAKA,CAACC,KAAK,EAAC;MACRA,KAAK,CAACN,eAAe,GAAG,IAAI;IAChC,CAAC;IACDO,MAAMA,CAACD,KAAK,EAAC;MACTA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;;AAMA;AACA;AACA,MAAMQ,KAAK,GAAGX,cAAc,CAAC;EACzB;EACA;EACAY,OAAO,EAAG;IACNC,OAAO,EAAGC,YAAY,CAACF,OAAO;IAC9BG,IAAI,EAAGX,SAAS,CAACQ;EACrB;;EAEA;EACA;AACJ,CAAC,CAAC;AACF;;AAEA;AACA,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGd,SAAS,CAACa,OAAO;AAC5C,eAAeN,KAAK;;AAMpB;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}