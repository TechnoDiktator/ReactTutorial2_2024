{"ast":null,"code":"var _jsxFileName = \"/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/pages/Events.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n\nimport EventsList from '../components/EventsList';\n\n//this will help us get the closest loader functions data\n\nimport { useLoaderData } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  //getting loaders answer\n  //const events = useLoaderData()\n\n  const data = useLoaderData();\n\n  //you can create you own error in he loader when there \n  //is one and send a different output\n  // if(data.isError){\n  //     return <p>{data.message}</p>\n  // }\n\n  const events = data.events;\n\n  //AS WE HAAVE USED THE LOADER FUNCTION TO GET THE RESULT OF THE \n  //BELOW API HIT \n  //WE DONT NEED TO USE useEFFECT ANY MORE\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [fetchedEvents, setFetchedEvents] = useState();\n  //   const [error, setError] = useState();\n\n  //   useEffect(() => {\n  //     async function fetchEvents() {\n  //       setIsLoading(true);\n  //       const response = await fetch('http://localhost:8080/events');\n\n  //       if (!response.ok) {\n  //         setError('Fetching events failed.');\n  //       } else {\n  //         const resData = await response.json();\n  //         setFetchedEvents(resData.events);\n  //       }\n  //       setIsLoading(false);\n  //     }\n\n  //     fetchEvents();\n  //   }, []);\n\n  return (\n    /*#__PURE__*/\n    //so now we dont have any hooks or states ...how do \n    //we acheive the smawe fuctionality that we had\n    // <>\n    // <div style={{ textAlign: 'center' }}>\n    //     {isLoading && <p>Loading...</p>}\n    //     {error && <p>{error}</p>}\n    // </div>\n    // {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n    // </>\n    _jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //\n    //we can return \n    //return {isError:true , message:\"Could not fetch tha data\"}\n\n    //or\n\n    //when you throw an error form a component \n    //react reouter detects it and will sent you v=backt o the \n    //nearest errors page if there is one\n    //throw {message: \"could not fetch events\"}\n\n    return new Response();\n  } else {\n    const resData = await response.json();\n    //return resData.events\n\n    //we can do this alos\n    //   const res = new Response('any data' , {\n    //     status:201\n    //   })\n\n    //or this\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","resData","json","$RefreshReg$"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/pages/Events.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\n\nimport EventsList from '../components/EventsList';\n\n\n//this will help us get the closest loader functions data\n\nimport { useLoaderData } from 'react-router-dom';\n\n\n\n\n\n\n\n\n\n\n\nfunction EventsPage() {\n    //getting loaders answer\n    //const events = useLoaderData()\n    \n    const data = useLoaderData()\n    \n    //you can create you own error in he loader when there \n    //is one and send a different output\n    // if(data.isError){\n    //     return <p>{data.message}</p>\n    // }\n\n    const events = data.events\n\n    //AS WE HAAVE USED THE LOADER FUNCTION TO GET THE RESULT OF THE \n    //BELOW API HIT \n    //WE DONT NEED TO USE useEFFECT ANY MORE\n    //   const [isLoading, setIsLoading] = useState(false);\n    //   const [fetchedEvents, setFetchedEvents] = useState();\n    //   const [error, setError] = useState();\n\n    //   useEffect(() => {\n    //     async function fetchEvents() {\n    //       setIsLoading(true);\n    //       const response = await fetch('http://localhost:8080/events');\n\n    //       if (!response.ok) {\n    //         setError('Fetching events failed.');\n    //       } else {\n    //         const resData = await response.json();\n    //         setFetchedEvents(resData.events);\n    //       }\n    //       setIsLoading(false);\n    //     }\n\n    //     fetchEvents();\n    //   }, []);\n    \n\n\n    return (\n        //so now we dont have any hooks or states ...how do \n        //we acheive the smawe fuctionality that we had\n        // <>\n        // <div style={{ textAlign: 'center' }}>\n        //     {isLoading && <p>Loading...</p>}\n        //     {error && <p>{error}</p>}\n        // </div>\n        // {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n        // </>\n\n        <EventsList events={events}></EventsList>\n\n    );\n}\n\nexport default EventsPage;\n\n\nexport async function loader() {\n\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        //\n        //we can return \n        //return {isError:true , message:\"Could not fetch tha data\"}\n\n\n        //or\n\n        //when you throw an error form a component \n        //react reouter detects it and will sent you v=backt o the \n        //nearest errors page if there is one\n        //throw {message: \"could not fetch events\"}\n\n\n        return new Response\n\n    } else {\n      const resData = await response.json();\n      //return resData.events\n        \n      //we can do this alos\n        //   const res = new Response('any data' , {\n        //     status:201\n        //   })\n        \n        //or this\n        return response\n    }\n} \n\n\n\n\n"],"mappings":";;AAAA;;AAEA,OAAOA,UAAU,MAAM,0BAA0B;;AAGjD;;AAEA,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYjD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB;EACA;;EAEA,MAAMC,IAAI,GAAGL,aAAa,CAAC,CAAC;;EAE5B;EACA;EACA;EACA;EACA;;EAEA,MAAMM,MAAM,GAAGD,IAAI,CAACC,MAAM;;EAE1B;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAIA;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEAJ,OAAA,CAACH,UAAU;MAACO,MAAM,EAAEA;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa;EAAC;AAGjD;AAACN,EAAA,CAtDQD,UAAU;EAAA,QAIFH,aAAa;AAAA;AAAAW,EAAA,GAJrBR,UAAU;AAwDnB,eAAeA,UAAU;AAGzB,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAE3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA;;IAGA;;IAEA;IACA;IACA;IACA;;IAGA,OAAO,IAAIC,QAAQ,CAAD,CAAC;EAEvB,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACrC;;IAEA;IACE;IACA;IACA;;IAEA;IACA,OAAOL,QAAQ;EACnB;AACJ;AAAC,IAAAF,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}