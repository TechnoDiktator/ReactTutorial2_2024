{"ast":null,"code":"var _jsxFileName = \"/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport HomePage from './pages/Home';\nimport EventsPage from './pages/Events';\nimport EventDetailPage, { loader as eventDetailLoader } from './pages/EventDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport RootLayout from './pages/Root';\nimport EventsRootLayout from './pages/EventsRoot';\nimport { loader as eventsLoader } from './pages/Events';\nimport ErrorPage from './pages/ErrorPage';\n\n//so we are creating routes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([\n//we are going to use relative paths\n{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 18\n  }, this),\n  children: [{\n    path: '',\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 28\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }, this),\n    children: [{\n      path: \"\",\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 23\n      }, this),\n      //in case of error on a page the closest error in the route configuration elemnt os executed\n      errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 26\n      }, this),\n      loader: eventsLoader\n\n      //we can delacre the loader in the route object as below also\n      //async () => {\n      //a loader function just gets executed when someone visits that route\n      //even though the fucntion below is returniing a promise\n      //react reouter dom knpws and will give you the resolved result \n      //when it is done\n      //ot will make the result of such a function available when someone visits such a page\n      // const response = await fetch('http://localhost:8080/events');\n\n      //   if (!response.ok) {\n      //     //\n      //   } else {\n      //     const resData = await response.json();\n      //     return resData.events\n      //     //\n      //   }\n      // } \n    }, {\n      path: \":eventId\",\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }, this),\n      loader: eventDetailLoader\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 22\n      }, this)\n    }, {\n      path: \":eventId/edit\",\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 22\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventsPage","EventDetailPage","loader","eventDetailLoader","NewEventPage","EditEventPage","RootLayout","EventsRootLayout","eventsLoader","ErrorPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","App","_c","$RefreshReg$"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\n\n\nimport {createBrowserRouter ,  RouterProvider } from 'react-router-dom';\nimport HomePage from './pages/Home';\nimport EventsPage from './pages/Events';\nimport EventDetailPage , {loader as eventDetailLoader} from './pages/EventDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport RootLayout from './pages/Root';\nimport EventsRootLayout from './pages/EventsRoot';\n\nimport {loader as eventsLoader} from './pages/Events' \nimport ErrorPage from './pages/ErrorPage';\n\n//so we are creating routes\nconst router = createBrowserRouter([\n  //we are going to use relative paths\n  {path:'/', \n    element:<RootLayout></RootLayout>  , \n    errorElement:<ErrorPage></ErrorPage>,\n    children: [\n      {path:'' , element : <HomePage></HomePage> } ,\n\n      {\n        path:'events' , element: <EventsRootLayout></EventsRootLayout> ,\n        \n        children:[\n          {\n            path:\"\" , \n            element : <EventsPage></EventsPage> , \n            //in case of error on a page the closest error in the route configuration elemnt os executed\n            errorElement:<ErrorPage></ErrorPage>,\n            loader: eventsLoader\n\n            //we can delacre the loader in the route object as below also\n            //async () => {\n            //a loader function just gets executed when someone visits that route\n            //even though the fucntion below is returniing a promise\n            //react reouter dom knpws and will give you the resolved result \n            //when it is done\n            //ot will make the result of such a function available when someone visits such a page\n            // const response = await fetch('http://localhost:8080/events');\n\n            //   if (!response.ok) {\n            //     //\n            //   } else {\n            //     const resData = await response.json();\n            //     return resData.events\n            //     //\n            //   }\n            // } \n          } , \n          {\n            path: \":eventId\" , \n            element : <EventDetailPage></EventDetailPage>,\n            loader:eventDetailLoader\n          } , \n\n\n          \n          {\n            path:\"new\" , \n            element :<NewEventPage></NewEventPage> \n          } , \n          {\n            path:\":eventId/edit\" , \n            element: <EditEventPage></EditEventPage>\n          }\n        ]\n      },\n\n    ]\n  },\n])\n\nfunction App() {\n  return <RouterProvider router={router}></RouterProvider>\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAAQA,mBAAmB,EAAIC,cAAc,QAAQ,kBAAkB;AACvE,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,eAAe,IAAIC,MAAM,IAAIC,iBAAiB,QAAO,qBAAqB;AACjF,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,gBAAgB,MAAM,oBAAoB;AAEjD,SAAQL,MAAM,IAAIM,YAAY,QAAO,gBAAgB;AACrD,OAAOC,SAAS,MAAM,mBAAmB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGf,mBAAmB,CAAC;AACjC;AACA;EAACgB,IAAI,EAAC,GAAG;EACPC,OAAO,eAACH,OAAA,CAACL,UAAU;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAa,CAAC;EACjCC,YAAY,eAACR,OAAA,CAACF,SAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;EACpCE,QAAQ,EAAE,CACR;IAACP,IAAI,EAAC,EAAE;IAAGC,OAAO,eAAGH,OAAA,CAACZ,QAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW;EAAE,CAAC,EAE5C;IACEL,IAAI,EAAC,QAAQ;IAAGC,OAAO,eAAEH,OAAA,CAACJ,gBAAgB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmB,CAAC;IAE9DE,QAAQ,EAAC,CACP;MACEP,IAAI,EAAC,EAAE;MACPC,OAAO,eAAGH,OAAA,CAACX,UAAU;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC;MACnC;MACAC,YAAY,eAACR,OAAA,CAACF,SAAS;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;MACpChB,MAAM,EAAEM;;MAER;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,EACD;MACEK,IAAI,EAAE,UAAU;MAChBC,OAAO,eAAGH,OAAA,CAACV,eAAe;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkB,CAAC;MAC7ChB,MAAM,EAACC;IACT,CAAC,EAID;MACEU,IAAI,EAAC,KAAK;MACVC,OAAO,eAAEH,OAAA,CAACP,YAAY;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe;IACvC,CAAC,EACD;MACEL,IAAI,EAAC,eAAe;MACpBC,OAAO,eAAEH,OAAA,CAACN,aAAa;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB;IACzC,CAAC;EAEL,CAAC;AAGL,CAAC,CACF,CAAC;AAEF,SAASG,GAAGA,CAAA,EAAG;EACb,oBAAOV,OAAA,CAACb,cAAc;IAACc,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AAC1D;AAACI,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}