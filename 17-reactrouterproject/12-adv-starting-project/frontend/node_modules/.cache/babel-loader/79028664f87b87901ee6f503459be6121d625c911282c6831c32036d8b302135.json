{"ast":null,"code":"var _jsxFileName = \"/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/components/NewsletterSignup.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport classes from './NewsletterSignup.module.css';\nimport { useFetcher } from 'react-router-dom';\n/*\n\nThe useFetcher hook in React Router is a powerful tool that allows you to interact with routes without causing navigation. It's particularly useful for actions like loading data or submitting forms asynchronously while staying on the current page. This can improve user experience by avoiding full-page reloads or unnecessary transitions.\n\nKey Features of useFetcher\nLoading Data\nYou can trigger a loader of a specific route programmatically, fetch its data, and use it within your component without navigating to the route.\n\nSubmitting Data\nIt allows you to send data to an action route (similar to a form submission) without leaving the current page.\n\nAccessing Fetcher State\nIt provides states like idle, loading, and submitting, which can be used to show spinners, disable buttons, or give visual feedback to users.\n\n\n\n\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewsletterSignup() {\n  _s();\n  const fetcher = useFetcher();\n  const {\n    data,\n    state\n  } = fetcher;\n  useEffect(() => {\n    if (state === 'idle' && data && data.message) {\n      window.alert(data.message);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(fetcher.Form, {\n    method: \"post\",\n    action: \"\\\"/newsletter\",\n    className: classes.newsletter,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Sign up for newsletter...\",\n      \"aria-label\": \"Sign up for newsletter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(NewsletterSignup, \"WjihN4CabdhkHDxQoVW7dBj/pPI=\", false, function () {\n  return [useFetcher];\n});\n_c = NewsletterSignup;\nexport default NewsletterSignup;\nvar _c;\n$RefreshReg$(_c, \"NewsletterSignup\");","map":{"version":3,"names":["useEffect","classes","useFetcher","jsxDEV","_jsxDEV","NewsletterSignup","_s","fetcher","data","state","message","window","alert","Form","method","action","className","newsletter","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/17-reactrouterproject/12-adv-starting-project/frontend/src/components/NewsletterSignup.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport classes from './NewsletterSignup.module.css';\nimport { useFetcher } from 'react-router-dom';\n/*\n\nThe useFetcher hook in React Router is a powerful tool that allows you to interact with routes without causing navigation. It's particularly useful for actions like loading data or submitting forms asynchronously while staying on the current page. This can improve user experience by avoiding full-page reloads or unnecessary transitions.\n\nKey Features of useFetcher\nLoading Data\nYou can trigger a loader of a specific route programmatically, fetch its data, and use it within your component without navigating to the route.\n\nSubmitting Data\nIt allows you to send data to an action route (similar to a form submission) without leaving the current page.\n\nAccessing Fetcher State\nIt provides states like idle, loading, and submitting, which can be used to show spinners, disable buttons, or give visual feedback to users.\n\n\n\n\n*/\n\nfunction NewsletterSignup() {\n\n    const fetcher = useFetcher()\n\n    const {data , state} = fetcher\n\n    useEffect(()=>{\n\n        if(state === 'idle' && data && data.message){\n            window.alert(data.message)\n        }\n\n    },)\n\n    return (\n    <fetcher.Form method=\"post\" \n    action='\"/newsletter'\n    className={classes.newsletter}>\n      <input\n        type=\"email\"\n        placeholder=\"Sign up for newsletter...\"\n        aria-label=\"Sign up for newsletter\"\n      />\n      <button>Sign up</button>\n    </fetcher.Form>\n  );\n}\n\nexport default NewsletterSignup;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,+BAA+B;AACnD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,SAAAC,MAAA,IAAAC,OAAA;AAmBA,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAExB,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAE5B,MAAM;IAACM,IAAI;IAAGC;EAAK,CAAC,GAAGF,OAAO;EAE9BP,SAAS,CAAC,MAAI;IAEV,IAAGS,KAAK,KAAK,MAAM,IAAID,IAAI,IAAIA,IAAI,CAACE,OAAO,EAAC;MACxCC,MAAM,CAACC,KAAK,CAACJ,IAAI,CAACE,OAAO,CAAC;IAC9B;EAEJ,CAAE,CAAC;EAEH,oBACAN,OAAA,CAACG,OAAO,CAACM,IAAI;IAACC,MAAM,EAAC,MAAM;IAC3BC,MAAM,EAAC,eAAc;IACrBC,SAAS,EAAEf,OAAO,CAACgB,UAAW;IAAAC,QAAA,gBAC5Bd,OAAA;MACEe,IAAI,EAAC,OAAO;MACZC,WAAW,EAAC,2BAA2B;MACvC,cAAW;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACFpB,OAAA;MAAAc,QAAA,EAAQ;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEnB;AAAClB,EAAA,CA1BQD,gBAAgB;EAAA,QAELH,UAAU;AAAA;AAAAuB,EAAA,GAFrBpB,gBAAgB;AA4BzB,eAAeA,gBAAgB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}