{"ast":null,"code":"var _jsxFileName = \"/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/18-authentication/01-starting-project (15)/01-starting-project/frontend/src/components/AuthForm.js\",\n  _s = $RefreshSig$();\nimport { Form, Link, useSearchParams, useActionData } from 'react-router-dom';\n/*\n\nIn React, the useSearchParams hook is part of the react-router-dom library \n(v6 and later) and provides a way to work with the query \nstring of the URL (i.e., the part after ? i\\\nn the URL). This hook is useful when you want \nto get or set URL query parameters in your \ncomponent.\n\nexample\nURL: https://example.com?page=2&sort=asc\nsearchParams will contain:\npage: \"2\"\nsort: \"asc\"\n\n\n\n\n*/\n\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AuthForm() {\n  _s();\n  const data = useActionData();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const isLogin = searchParams.get(\"mode\") === 'login';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isLogin ? 'Log in' : 'Create a new user'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"email\",\n          type: \"email\",\n          name: \"email\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"image\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"password\",\n          type: \"password\",\n          name: \"password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `?mode=${isLogin ? \"signup\" : \"login\"}`,\n          children: isLogin ? 'Create new user' : 'Login'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(AuthForm, \"DwflEpH9s9XIiiWbr8i/rSSnCiQ=\", false, function () {\n  return [useActionData, useSearchParams];\n});\n_c = AuthForm;\nexport default AuthForm;\n\n/*\n\nA dynamic route or dynamic URL is a route in a web application where part of the URL is variable, \ntypically used to represent a specific resource or data that \nchanges based on the request.\n\nIn dynamic routing, the part of the URL that changes is often \nrepresented by placeholders, and it allows you to \nmatch different URLs that follow a similar pattern.\n\nKey Characteristics of Dynamic Routes:\nVariable Path Segments: The URL structure contains variable \nparts that can change depending on the resource being requested.\nPattern Matching: Dynamic routes often use pattern matching \nto extract the dynamic segments of the URL and pass them to the application, allowing for routing to different pages based on the URL.\nExample of Dynamic URL in Web Development:\nSuppose you have an application that displays details about specific \nusers. Instead of having a fixed URL for each user, you use a dynamic \nroute to load the correct user based on their id.\n\nExample dynamic URL:\n\nbash\nCopy code\nhttps://example.com/users/:id\nIn this example, :id is a placeholder that can be replaced with an actual user ID, like:\n\narduino\nCopy code\nhttps://example.com/users/123\n\n*/\nvar _c;\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["Form","Link","useSearchParams","useActionData","classes","jsxDEV","_jsxDEV","Fragment","_Fragment","AuthForm","_s","data","searchParams","setSearchParams","isLogin","get","children","method","className","form","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","type","name","required","actions","to","_c","$RefreshReg$"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/18-authentication/01-starting-project (15)/01-starting-project/frontend/src/components/AuthForm.js"],"sourcesContent":["import { Form , Link  , useSearchParams , useActionData} from 'react-router-dom';\n/*\n\nIn React, the useSearchParams hook is part of the react-router-dom library \n(v6 and later) and provides a way to work with the query \nstring of the URL (i.e., the part after ? i\\\nn the URL). This hook is useful when you want \nto get or set URL query parameters in your \ncomponent.\n\nexample\nURL: https://example.com?page=2&sort=asc\nsearchParams will contain:\npage: \"2\"\nsort: \"asc\"\n\n\n\n\n*/\n\nimport classes from './AuthForm.module.css';\n\n\n\nfunction AuthForm() {\n\n  const data = useActionData()\n\n  const [searchParams , setSearchParams] = useSearchParams()\n\n  const isLogin = searchParams.get(\"mode\") === 'login'\n\n\n  return (\n    <>\n      <Form method=\"post\" className={classes.form}>\n        <h1>{isLogin ? 'Log in' : 'Create a new user'}</h1>\n        <p>\n          <label htmlFor=\"email\">Email</label>\n          <input id=\"email\" type=\"email\" name=\"email\" required />\n        </p>\n        <p>\n          <label htmlFor=\"image\">Password</label>\n          <input id=\"password\" type=\"password\" name=\"password\" required />\n        </p>\n        <div className={classes.actions}>\n          <Link to={`?mode=${isLogin ? \"signup\" : \"login\"}`}>\n            {isLogin ? 'Create new user' : 'Login'}\n          </Link>\n          <button>Save</button>\n        </div>\n      </Form>\n    </>\n  );\n}\n\nexport default AuthForm;\n\n/*\n\nA dynamic route or dynamic URL is a route in a web application where part of the URL is variable, \ntypically used to represent a specific resource or data that \nchanges based on the request.\n\nIn dynamic routing, the part of the URL that changes is often \nrepresented by placeholders, and it allows you to \nmatch different URLs that follow a similar pattern.\n\nKey Characteristics of Dynamic Routes:\nVariable Path Segments: The URL structure contains variable \nparts that can change depending on the resource being requested.\nPattern Matching: Dynamic routes often use pattern matching \nto extract the dynamic segments of the URL and pass them to the application, allowing for routing to different pages based on the URL.\nExample of Dynamic URL in Web Development:\nSuppose you have an application that displays details about specific \nusers. Instead of having a fixed URL for each user, you use a dynamic \nroute to load the correct user based on their id.\n\nExample dynamic URL:\n\nbash\nCopy code\nhttps://example.com/users/:id\nIn this example, :id is a placeholder that can be replaced with an actual user ID, like:\n\narduino\nCopy code\nhttps://example.com/users/123\n\n*/"],"mappings":";;AAAA,SAASA,IAAI,EAAGC,IAAI,EAAIC,eAAe,EAAGC,aAAa,QAAO,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAI5C,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAElB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAE5B,MAAM,CAACS,YAAY,EAAGC,eAAe,CAAC,GAAGX,eAAe,CAAC,CAAC;EAE1D,MAAMY,OAAO,GAAGF,YAAY,CAACG,GAAG,CAAC,MAAM,CAAC,KAAK,OAAO;EAGpD,oBACET,OAAA,CAAAE,SAAA;IAAAQ,QAAA,eACEV,OAAA,CAACN,IAAI;MAACiB,MAAM,EAAC,MAAM;MAACC,SAAS,EAAEd,OAAO,CAACe,IAAK;MAAAH,QAAA,gBAC1CV,OAAA;QAAAU,QAAA,EAAKF,OAAO,GAAG,QAAQ,GAAG;MAAmB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnDjB,OAAA;QAAAU,QAAA,gBACEV,OAAA;UAAOkB,OAAO,EAAC,OAAO;UAAAR,QAAA,EAAC;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpCjB,OAAA;UAAOmB,EAAE,EAAC,OAAO;UAACC,IAAI,EAAC,OAAO;UAACC,IAAI,EAAC,OAAO;UAACC,QAAQ;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACJjB,OAAA;QAAAU,QAAA,gBACEV,OAAA;UAAOkB,OAAO,EAAC,OAAO;UAAAR,QAAA,EAAC;QAAQ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACvCjB,OAAA;UAAOmB,EAAE,EAAC,UAAU;UAACC,IAAI,EAAC,UAAU;UAACC,IAAI,EAAC,UAAU;UAACC,QAAQ;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC,eACJjB,OAAA;QAAKY,SAAS,EAAEd,OAAO,CAACyB,OAAQ;QAAAb,QAAA,gBAC9BV,OAAA,CAACL,IAAI;UAAC6B,EAAE,EAAE,SAAShB,OAAO,GAAG,QAAQ,GAAG,OAAO,EAAG;UAAAE,QAAA,EAC/CF,OAAO,GAAG,iBAAiB,GAAG;QAAO;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACPjB,OAAA;UAAAU,QAAA,EAAQ;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC,gBACP,CAAC;AAEP;AAACb,EAAA,CA9BQD,QAAQ;EAAA,QAEFN,aAAa,EAEeD,eAAe;AAAA;AAAA6B,EAAA,GAJjDtB,QAAQ;AAgCjB,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}