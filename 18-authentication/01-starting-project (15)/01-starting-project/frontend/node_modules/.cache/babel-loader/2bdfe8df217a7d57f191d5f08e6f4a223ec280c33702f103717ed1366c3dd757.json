{"ast":null,"code":"var _jsxFileName = \"/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/18-authentication/01-starting-project (15)/01-starting-project/frontend/src/pages/Authentication.js\";\nimport AuthForm from '../components/AuthForm';\nimport { useSearchParams, json, redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\n\n//action fucntion is implicitely provided with a \n//object that contains a request property\n//so that can be used to get the form data\nexport async function action({\n  request\n}) {\n  // Access search parameters (query params) from the request URL\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || 'login';\n  console.log(mode === \"login\");\n  console.log(mode === \"signup\");\n\n  // Check for valid modes\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({\n      message: \"Unsupported or Invalid mode\"\n    }, {\n      status: 422\n    });\n  }\n\n  // Await the form data from the request\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n\n  // Make a fetch request to the appropriate endpoint based on the mode (login/signup)\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(authData)\n  });\n\n  // Handle errors based on the response status\n  if (response.status === 422 || response.status === 401) {\n    return response; // The response can be passed directly in these cases\n  }\n  if (!response.ok) {\n    throw json({\n      message: \"Could Not Authenticate User\"\n    }, {\n      status: 500\n    });\n  }\n\n  //fetching the auth token\n  const resData = await response.json();\n  localStorage.setItem(\"token\", t);\n\n  // Redirect after successful authentication\n  return redirect('/');\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["AuthForm","useSearchParams","json","redirect","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","console","log","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","JSON","stringify","ok","resData","localStorage","setItem","t","$RefreshReg$"],"sources":["/home/tarang/Desktop/Projects/DEV/react/ReactTutorial2_2024/18-authentication/01-starting-project (15)/01-starting-project/frontend/src/pages/Authentication.js"],"sourcesContent":["import AuthForm from '../components/AuthForm';\nimport { useSearchParams, json, redirect } from 'react-router-dom';\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\n\n//action fucntion is implicitely provided with a \n//object that contains a request property\n//so that can be used to get the form data\nexport async function action({ request }) {\n  // Access search parameters (query params) from the request URL\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || 'login';\n\n  console.log(mode === \"login\");\n  console.log(mode === \"signup\");\n\n  // Check for valid modes\n  if (mode !== 'login' && mode !== 'signup') {\n    throw json({ message: \"Unsupported or Invalid mode\" }, { status: 422 });\n  }\n\n  // Await the form data from the request\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  // Make a fetch request to the appropriate endpoint based on the mode (login/signup)\n  const response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(authData),\n  });\n\n  // Handle errors based on the response status\n  if (response.status === 422 || response.status === 401) {\n    return response; // The response can be passed directly in these cases\n  }\n\n  if (!response.ok) {\n    throw json({ message: \"Could Not Authenticate User\" }, { status: 500 });\n  }\n\n  //fetching the auth token\n  const resData = await response.json()\n\n  localStorage.setItem(\"token\" , t)\n\n\n  // Redirect after successful authentication\n  return redirect('/');\n}"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,eAAe,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACL,QAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;;AAGjC;AACA;AACA;AACA,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC;EACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAEhDC,OAAO,CAACC,GAAG,CAACH,IAAI,KAAK,OAAO,CAAC;EAC7BE,OAAO,CAACC,GAAG,CAACH,IAAI,KAAK,QAAQ,CAAC;;EAE9B;EACA,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAMf,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA8B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACzE;;EAEA;EACA,MAAMC,IAAI,GAAG,MAAMV,OAAO,CAACW,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACL,GAAG,CAAC,OAAO,CAAC;IACxBS,QAAQ,EAAEJ,IAAI,CAACL,GAAG,CAAC,UAAU;EAC/B,CAAC;;EAED;EACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGZ,IAAI,EAAE;IAC5Da,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOM,QAAQ,CAAC,CAAC;EACnB;EAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMjC,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA8B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACzE;;EAEA;EACA,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAAC1B,IAAI,CAAC,CAAC;EAErCmC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAGC,CAAC,CAAC;;EAGjC;EACA,OAAOpC,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAQ,EAAA;AAAA6B,YAAA,CAAA7B,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}